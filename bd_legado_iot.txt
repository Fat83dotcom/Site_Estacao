# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class DailyDataAnalysis(models.Model):
    id_d_d_analysis = models.AutoField(primary_key=True)
    id_sensor = models.ForeignKey('Sensor', models.DO_NOTHING, db_column='id_sensor')
    temperature_mean = models.FloatField(blank=True, null=True)
    temperature_maximun = models.FloatField(blank=True, null=True)
    temperature_minimun = models.FloatField(blank=True, null=True)
    temperature_mode = models.FloatField(blank=True, null=True)
    temperature_median = models.FloatField(blank=True, null=True)
    humidity_mean = models.FloatField(blank=True, null=True)
    humidity_maximun = models.FloatField(blank=True, null=True)
    humidity_minimun = models.FloatField(blank=True, null=True)
    humidity_mode = models.FloatField(blank=True, null=True)
    humidity_median = models.FloatField(blank=True, null=True)
    pressure_mean = models.FloatField(blank=True, null=True)
    pressure_maximun = models.FloatField(blank=True, null=True)
    pressure_minimun = models.FloatField(blank=True, null=True)
    pressure_mode = models.FloatField(blank=True, null=True)
    pressure_median = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'daily_data_analysis'


class DataSensor(models.Model):
    id_data = models.AutoField(primary_key=True)
    id_sensor = models.ForeignKey('Sensor', models.DO_NOTHING, db_column='id_sensor')
    date_hour = models.DateTimeField(blank=True, null=True)
    temperature = models.FloatField(blank=True, null=True)
    humidity = models.FloatField(blank=True, null=True)
    pressure = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'data_sensor'


class Localization(models.Model):
    id_loc = models.AutoField(primary_key=True)
    city = models.CharField(max_length=100, blank=True, null=True)
    neighborhood = models.CharField(max_length=100, blank=True, null=True)
    coordinates = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'localization'


class Sensor(models.Model):
    id_sen = models.AutoField(primary_key=True)
    id_localization = models.ForeignKey(Localization, models.DO_NOTHING, db_column='id_localization', blank=True, null=True)
    mac = models.CharField(unique=True, max_length=20)

    class Meta:
        managed = False
        db_table = 'sensor'
